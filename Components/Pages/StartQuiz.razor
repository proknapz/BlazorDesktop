@*written by manoj starting 4/12/2025 CS 4485 *@
@page "/startquiz"
@inject ApplicationDbContext Db
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@*display quiz that will be added*@
<h3>Assign Quiz Bank to Class</h3>

<EditForm Model="@quizSession" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Select Class:</label>
        <select class="form-control" @bind="quizSession.ClassId">
            <option value="">-- Select a Class --</option>
            @foreach (var cls in classes)
            {
                <option value="@cls.classId">@cls.courseName (@cls.courseNumber)</option>
            }
        </select>
    </div>
    @*dropdown for quiz banks*@
    <div class="form-group mb-2">
        <label>Select Quiz Bank:</label>
        <select class="form-control" @bind="quizSession.QuizBankId">
            <option value="">-- Select a Quiz Bank --</option>
            @foreach (var qb in quizBanks)
            {
                <option value="@qb.QuizBankId">@qb.Title</option>
            }
        </select>
    </div>
    @*display quiz active time*@
    <div class="form-group mb-2">
        <label>Duration (minutes):</label>
        <select class="form-control" @bind="selectedDuration">
            @for (int i = 5; i <= 60; i += 5)
            {
                <option value="@i">@i minutes</option>
            }
        </select>
    </div>
    @*quiz password*@
    <div class="form-group mb-2">
        <label>Quiz Password:</label>
        <InputText class="form-control" @bind-Value="quizSession.password" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">Assign Quiz</button>
</EditForm>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

@code {
    private List<Class> classes = new();
    private List<QuizBank> quizBanks = new();
    private QuizSession quizSession = new QuizSession();
    private string statusMessage = string.Empty;
    private int selectedDuration = 30;
    //wait for user data
    protected override async Task OnInitializedAsync()
    {
        classes = await Db.Classes.ToListAsync();
        quizBanks = await Db.QuizBanks.ToListAsync();
    }
	//save data on db after entering all fields
    private async Task HandleSubmit()
    {
        try
        {
            var now = DateTime.Now;
            var start = now.TimeOfDay;
            var end = start.Add(TimeSpan.FromMinutes(selectedDuration));
            //validation 
            var activeSessions = await Db.QuizSessions
                .Where(s => s.ClassId == quizSession.ClassId && s.IsActive)
                .ToListAsync();
            //check if quiz is assigned
            if (activeSessions.Any())
            {
                bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                    $"A quiz is already assigned to this class. Overwrite it?");

                if (!confirmed)
                {
                    statusMessage = "Quiz assignment cancelled.";
                    return;
                }

                foreach (var session in activeSessions)
                {
                    session.IsActive = false;
                }
            }

            quizSession.SessionDate = now;
            quizSession.startTime = start;
            quizSession.endTime = end;
            quizSession.IsActive = true;

            Db.QuizSessions.Add(quizSession);
            await Db.SaveChangesAsync();
            statusMessage = "Quiz assigned successfully.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }
}
