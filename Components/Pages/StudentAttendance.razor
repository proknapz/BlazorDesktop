@*written by omar  starting 4/8/2025 CS 4485 *@
@page "/StudentAttendance"
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore

<link href="css/StudentAttendance.css" rel="stylesheet" />

<h3>Select a Class</h3>
@*UI to select a class*@
@if (!string.IsNullOrEmpty(errorMessage))
{
        <p class="text-danger">@errorMessage</p>
}
else if (classList == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <div class="button-container">
            @foreach (var c in classList)
            {
                    <button class="class-button" @onclick="() => LoadAttendanceRecords(c.classId)">
                        @c.courseName - @c.courseNumber
                    </button>
            }
        </div>
}
@*select class by id using a filter*@
@if (selectedClassId != null)
{
    var selectedClass = classList?.FirstOrDefault(c => c.classId == selectedClassId);
    if (selectedClass != null)
    {
                <h4 class="mt-4">Attendance Records for @selectedClass.courseName - @selectedClass.courseNumber</h4>
    }

    @if (groupedAttendance == null || !groupedAttendance.Any())
    {
                <p><em>No attendance records found for this class.</em></p>
    }
    else
    {
                <input type="text" class="form-control mb-3" placeholder="Search student name..."
                       @bind="searchText" @bind:event="oninput" />
                @*display title of columns*@
                <table class="table table-bordered table-sm">
                    <thead>
                        <tr>
                            <th>Student Name</th>
                            <th>Arrival Time</th>
                            <th>Is Present</th>
                            <th>Is Excused</th>
                            <th>Class Date</th>
                            <th>Current IP</th>
                            <th>Delete?</th>
                        </tr>
                    </thead>

                    <tbody>
                        @*display attentence information from database of students*@
                        @foreach (var studentGroup in groupedAttendance
                                                .Where(g => string.IsNullOrWhiteSpace(searchText)
                                                        || g.Value.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
                        {
                                var recordCount = studentGroup.Value.Records.Count;
                                for (int i = 0; i < recordCount; i++)
                                {
                                        var row = studentGroup.Value.Records[i];
                                        <tr class="@(row.MarkedForDeletion ? "marked-for-deletion" : "")">
                                            @if (i == 0)
                                            {
                                                    <td rowspan="@recordCount">@studentGroup.Value.FullName</td>
                                            }
                                            <td>@row.Record.ArrivalTime.ToString(@"hh\:mm\:ss")</td>
                                            <td><input type="checkbox" @bind="row.Record.IsPresent" /></td>
                                            <td><input type="checkbox" @bind="row.Record.IsExcused" /></td>
                                            <td>@row.Record.ClassDate.ToShortDateString()</td>
                                            <td>@row.Record.CurrentIP</td>
                                            <td><input type="checkbox" @bind="row.MarkedForDeletion" /></td>
                                        </tr>
                                }
                        }
                    </tbody>
                </table>

                <button class="btn btn-primary mt-3" @onclick="SaveChanges">Save Changes</button>
    }
}

@code {
    public class AttendanceViewModel
    {
        public AttendanceRecord Record { get; set; } = default!;
        public bool MarkedForDeletion { get; set; } = false;
    }

    private List<Class>? classList;
    private string? errorMessage;
    private int? selectedClassId;
    private string searchText = string.Empty;

    private Dictionary<int, (string FullName, List<AttendanceViewModel> Records)> groupedAttendance
        = new();
    //pull data from database
    protected override async Task OnInitializedAsync()
    {
        try
        {
            classList = await DbContext.Classes.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
    //load the attendance records of a selected class
    private async Task LoadAttendanceRecords(int classId)
    {
        selectedClassId = classId;
        try
        {
            var records = await DbContext.AttendanceRecords
                .Where(a => a.ClassId == classId)
                .Include(a => a.Student)
                .ToListAsync();

            var viewModels = records.Select(r => new AttendanceViewModel { Record = r }).ToList();

            groupedAttendance = viewModels
                .GroupBy(vm => vm.Record.StudentId)
                .ToDictionary(
                    g => g.Key,
                    g =>
                    {
                        var student = g.First().Record.Student;
                        var fullName = $"{student.firstName} {student.lastName}";
                        return (fullName, g.ToList());
                    }
                );
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading attendance: {ex.Message}";
        }
    }
	//save changes to the database
    private async Task SaveChanges()
    {
        try
        {
            var allRecords = groupedAttendance.Values.SelectMany(g => g.Records).ToList();

            var toDelete = allRecords.Where(vm => vm.MarkedForDeletion).Select(vm => vm.Record).ToList();
            var toUpdate = allRecords.Where(vm => !vm.MarkedForDeletion).Select(vm => vm.Record).ToList();

            if (toDelete.Any())
            {
                DbContext.AttendanceRecords.RemoveRange(toDelete);
            }

            if (toUpdate.Any())
            {
                DbContext.AttendanceRecords.UpdateRange(toUpdate);
            }

            await DbContext.SaveChangesAsync();

            if (selectedClassId.HasValue)
            {
                await LoadAttendanceRecords(selectedClassId.Value);
            }

            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
        }
    }
}
