@page "/StudentAttendance"
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore

<style>
    .class-button {
        background-color: white;
        color: black;
        border: 1px solid #ccc;
        margin: 0.5rem;
        padding: 0.75rem 1.5rem;
        transition: background-color 0.2s ease-in-out;
        border-radius: 5px;
        cursor: pointer;
    }

        .class-button:hover {
            background-color: #f0f0f0;
        }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .marked-for-deletion {
        text-decoration: line-through;
        color: gray;
        background-color: #f9f9f9;
    }
</style>

<h3>Select a Class</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else if (classList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="button-container">
        @foreach (var c in classList)
        {
            <button class="class-button" @onclick="() => LoadAttendanceRecords(c.classId)">
                @c.courseName - @c.courseNumber
            </button>
        }
    </div>
}

@if (selectedClassId != null)
{
    var selectedClass = classList?.FirstOrDefault(c => c.classId == selectedClassId);
    if (selectedClass != null)
    {
        <h4 class="mt-4">Attendance Records for @selectedClass.courseName - @selectedClass.courseNumber</h4>
    }

    @if (attendanceViewList == null)
    {
        <p><em>Loading attendance records...</em></p>
    }
    else if (!attendanceViewList.Any())
    {
        <p>No attendance records found for this class.</p>
    }
    else
    {
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Student Name</th>
                    <th>Arrival Time</th>
                    <th>Is Present</th>
                    <th>Is Excused</th>
                    <th>Class Date</th>
                    <th>Current IP</th>
                    <th>Delete?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in attendanceViewList)
                {
                    <tr class="@(row.MarkedForDeletion ? "marked-for-deletion" : "")">
                        <td>@row.Record.Student.firstName @row.Record.Student.lastName</td>
                        <td>@row.Record.ArrivalTime.ToString(@"hh\:mm\:ss")</td>
                        <td><input type="checkbox" @bind="row.Record.IsPresent" disabled="@row.MarkedForDeletion" /></td>
                        <td><input type="checkbox" @bind="row.Record.IsExcused" disabled="@row.MarkedForDeletion" /></td>
                        <td>@row.Record.ClassDate.ToShortDateString()</td>
                        <td>@row.Record.CurrentIP</td>
                        <td>
                            <input type="checkbox" @bind="row.MarkedForDeletion" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-primary mt-3" @onclick="SaveChanges">Save Changes</button>
    }
}

@code {
    // ViewModel to track each attendance record and its deletion state
    public class AttendanceViewModel
    {
        public AttendanceRecord Record { get; set; } = default!;
        public bool MarkedForDeletion { get; set; } = false;
    }

    private List<Class>? classList;
    private List<AttendanceViewModel>? attendanceViewList;
    private string? errorMessage;
    private int? selectedClassId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            classList = await DbContext.Classes.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task LoadAttendanceRecords(int classId)
    {
        selectedClassId = classId;
        try
        {
            var records = await DbContext.AttendanceRecords
                .Where(a => a.ClassId == classId)
                .Include(a => a.Student)
                .ToListAsync();

            attendanceViewList = records.Select(record => new AttendanceViewModel
                {
                    Record = record
                }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading attendance: {ex.Message}";
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            if (attendanceViewList == null)
                return;

            var toDelete = attendanceViewList
                .Where(vm => vm.MarkedForDeletion)
                .Select(vm => vm.Record)
                .ToList();

            var toUpdate = attendanceViewList
                .Where(vm => !vm.MarkedForDeletion)
                .Select(vm => vm.Record)
                .ToList();

            if (toDelete.Any())
            {
                DbContext.AttendanceRecords.RemoveRange(toDelete);
            }

            if (toUpdate.Any())
            {
                DbContext.AttendanceRecords.UpdateRange(toUpdate);
            }

            await DbContext.SaveChangesAsync();

            if (selectedClassId.HasValue)
            {
                await LoadAttendanceRecords(selectedClassId.Value);
            }

            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
        }
    }
}
