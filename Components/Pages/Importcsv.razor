@* written by vishal starting 4/2/2025 CS 4485 *@

@page "/Importcsv"
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext Db
@using BlazorDesktop
@using BlazorDesktop.Components.Pages

<h3>Import CSV Data</h3>

<div class="container">
    <div class="form-group">
        <button class="btn btn-primary" @onclick="SelectFile">Browse</button>
        <span>@filePath</span>
    </div>
    @* importcsv button *@
    <div class="form-group">
        <button class="btn btn-success" @onclick="ImportFromCsv" disabled="@Importbutton">Import</button>
    </div>

    <div class="form-group">
        <label>Status:</label>
        <span class="status-message">@statusMessage</span>
    </div>

    @* csv file display *@
    @if (csvData != null && csvData.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    @foreach (var header in csvData[0].Keys)
                    {
                        <th>@header</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in csvData)
                {
                    <tr>
                        @foreach (var value in row.Values)
                        {
                            <td>@value</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    <hr />
    <Manualstudentimport />
</div>

@code {
    private string filePath = string.Empty;
    private string statusMessage = "No file selected.";
    private bool Importbutton = true;
    private List<Dictionary<string, string>> csvData = null;

    //reads the csv file once picked from files
    private async Task SelectFile()
    {
        try
        {
            var fileContent = await JSRuntime.InvokeAsync<string>("selectAndReadFile");
            if (string.IsNullOrEmpty(fileContent))
            {
                statusMessage = "Failed to read the file.";
                return;
            }

            csvData = parseCsv(fileContent);
            filePath = "File Selected";
            Importbutton = false;
            statusMessage = "CSV loaded.";
        }
        catch (Exception ex)
        {
            statusMessage = $"SelectFile error: {ex.Message}";
        }
    }
    private List<Dictionary<string, string>> parseCsv(string csvContent)
    {
        var rows = new List<Dictionary<string, string>>();
        var lines = csvContent.Split('\n');
        if (lines.Length == 0) return rows;

        var headers = lines[0].Split(',');
        for (int i = 1; i < lines.Length; i++)
        {
            var row = new Dictionary<string, string>();
            var section = lines[i].Split(',');

            for (int j = 0; j < headers.Length; j++)
            {
                if (j < section.Length)
                    row[headers[j].Trim()] = section[j].Trim();
            }

            if (row.Count > 0) rows.Add(row);
        }
        return rows;
    }

    //parsed csv into student record in db and updates
    private async Task ImportFromCsv()
    {
        if (csvData == null || csvData.Count == 0)
        {
            statusMessage = "No CSV data to import.";
            return;
        }

        var validClassIds = await Db.Classes.Select(c => c.classId).ToListAsync();

        var students = csvData.Select(row =>
        {
            int parsedClassId = int.TryParse(row.GetValueOrDefault("classId")?.Trim(), out var cid) ? cid : -1;

            return new Student
                {
                    studentId = int.TryParse(row.GetValueOrDefault("studentId")?.Trim(), out var sid) ? sid : 0,
                    utdID = row.GetValueOrDefault("utdID")?.Trim(),
                    firstName = row.GetValueOrDefault("firstName")?.Trim(),
                    lastName = row.GetValueOrDefault("lastName")?.Trim(),
                    classId = parsedClassId,
                    instructorId = int.TryParse(row.GetValueOrDefault("instructorId")?.Trim(), out var instId) ? instId : 0
                };
        })
        .Where(s => validClassIds.Contains(s.classId))
        .ToList();

        try
        {
            foreach (var student in students)
            {
                var existing = await Db.Students.FindAsync(student.studentId);
                if (existing != null)
                {
                    Db.Entry(existing).CurrentValues.SetValues(student);
                }
                else
                {
                    Db.Students.Add(student);
                }
            }

            await Db.SaveChangesAsync();
            statusMessage = $"Imported or updated {students.Count} student(s) successfully.";
        }
        catch (Exception ex)
        {
            var inner = ex.InnerException?.Message ?? "No inner exception";
            statusMessage = $"CSV insert error: {ex.Message} | Inner: {inner}";
        }
    }
}

<script>
    // js for csv file inputs
    window.selectAndReadFile = async () => {
        const input = document.createElement("input");
        input.type = "file";
        input.accept = ".csv";
        return new Promise((resolve, reject) => {
            input.onchange = (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        resolve(event.target.result);
                    };
                    reader.onerror = (error) => {
                        reject(error);
                    };
                    reader.readAsText(file);
                } else {
                    resolve(null);
                }
            };
            input.click();
        });
    };
</script>
